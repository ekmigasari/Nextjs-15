---
description: 
globs: 
alwaysApply: true
---
# Project Rules

## Environment

- Framework: Next.js v.15, App Router-based Next.js application, React v.19
- UI: Tailwind CSS v4
- Component Library: 
- Language: TypeScript
- Package Manager: Bun 
- Linter: Eslint v.8

- React 19

## Naming Conventions
- **Files & Directories**:
  - Use kebab-case for directories: `user-profile/`
  - Use PascalCase for React components: `UserProfile.tsx`
  - Use camelCase for utility files: `formatDate.ts`
  - Page files should be named `page.tsx`
  - Layout files should be named `layout.tsx`
  - Loading states should be named `loading.tsx`
  - Error boundaries should be named `error.tsx`

- **JavaScript/TypeScript**:
  - Use PascalCase for component names, interfaces, and type aliases: `UserProfile`, `UserProfileProps`
  - Use camelCase for variables, functions, and methods: `getUserData()`, `formatDate()`
  - Use UPPER_SNAKE_CASE for constants: `MAX_RETRY_COUNT`
  - Use `I` prefix for interfaces only when necessary for clarity: `IUserProps`
  - Use descriptive, intention-revealing names
  - Prefer full words over abbreviations
  - Boolean variables should use prefixes like `is`, `has`, `should`: `isLoading`, `hasAccess`

## Code Style Practice
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Always add "use client" directive at the top of Client Components
- Keep Client Components as small and focused as possible
- Avoid mixing server and client code in the same component when possible


## Code Organization
- High cohesion: Keep related functionality together
  - Group functions that work on the same data or functionality
  - Place related components in the same directory
- Low coupling: Minimize dependencies between modules
  - Use interfaces and abstractions when appropriate
  - Avoid direct dependencies between unrelated modules
- Pragmatic approach to coupling and cohesion:
  - Balance perfect architecture with practical needs
  - Use shared contexts sparingly and with clear boundaries
  - Prioritize readability and maintainability over theoretical purity
  - Create boundaries between feature modules to prevent unwanted dependencies


## Development Workflow
- `bun dev` - Start development server
- `bun build` - Build for production
- `bun start` - Start production server
- `bun lint` - Run linter with auto-fix
